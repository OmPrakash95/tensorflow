syntax = "proto3";

// Copyright 2015 William Chan <williamchan@cmu.edu>.

package speech4;

message DatasetParamsProto {
  string name = 1;
  string path = 2;
  int64 size = 3;
  int64 features_size = 4;
  int64 features_len_max = 5;
  int64 tokens_len_max = 6;
  bool collapse_eow = 7;
};

message ExperimentParamsProto {
  string description = 1;

  ModelParamsProto model_params = 2;
  OptimizationParamsProto optimization_params = 3;
};

message AttentionParamsProto {
  string type = 1;

  // TODO(williamchan): These fields are actually not used, but the python op
  // default values are used instead.
  int64 median_window_l = 2;
  int64 median_window_r = 3;

  int64 s_min = 4;
  int64 s_max = 5;
  float v_min = 6;
  float v_max = 7;
};

message VisualizationParamsProto {
  bool attention = 1;
  bool encoder_predictions = 2;
};

message LossParamsProto {
  bool log_prob = 1;
  bool edit_distance = 2;
};

message CCTCParamsProto {
  // Use xent w/ fake alignment (i.e., for first epoch).
  bool xent = 1;
  bool weakly_supervised = 2;
  bool reinforce = 3;
  bool sample = 4;
  bool discount_factor = 5;
};

message ModelParamsProto {
  int64 features_width = 1;
  int64 features_len_max = 2;
  int64 tokens_len_max = 3;
  int64 vocab_size = 4;
  int64 embedding_size = 5;
  int64 encoder_cell_size = 6;
  int64 decoder_cell_size = 7;
  int64 attention_embedding_size = 8;

  // placeholder (old decoder), decoder_greedy (greedy decoder).
  string input_layer = 9;

  bool encoder_only = 10;
  bool encoder_lm = 11;

  AttentionParamsProto attention_params = 12;

  string mode = 13;
  string type = 14;

  int64 frame_stack = 20;
  int64 frame_skip = 21;

  string encoder_prefix = 100;
  repeated string encoder_layer = 101;
  string encoder_embedding = 102;

  string decoder_prefix = 200;
  repeated string decoder_layer = 201;

  // Pinyin extension experiments.
  bool pinyin_ext = 300;
  int64 pinyin_dim = 301;
  int64 pinyin_vocab_size = 302;

  CCTCParamsProto cctc = 500;

  DatasetParamsProto dataset = 1000;
  LossParamsProto loss = 2000;
  ResultsProto results = 2001;

  string ckpt = 3000;
};

message AdagradParamsProto {
  float learning_rate = 1;
  float initial_accumulator_value = 2;

  bool reset = 3;
};

message AdadeltaParamsProto {
  float learning_rate = 1;
  float decay_rate = 2;
  float epsilon = 3;

  bool reset = 4;
};

message AdamParamsProto {
  float learning_rate = 1;
  float beta1 = 2;
  float beta2 = 3;
  float epsilon = 4;

  bool reset = 5;
};

message GradientDescentParamsProto {
  float learning_rate = 1;
  float momentum = 2;
};

message OptimizationParamsProto {
  string type = 1;
  int64 epochs = 2;

  bool shuffle = 300;

  float max_gradient_norm = 3;

  AdagradParamsProto adagrad = 4;
  AdadeltaParamsProto adadelta = 5;
  AdamParamsProto adam = 6;
  GradientDescentParamsProto gd = 7;

  float sample_prob = 100;

  float encoder_lm_loss_weight = 200;

  float gaussian_noise_stddev = 1000;
};

message DecoderParamsProto {
  int64 beam_width = 1;
  string token_model = 2;
};

message EditDistanceResultsProto {
  float error_rate = 1;

  int64 ins = 2;
  int64 del = 3;
  int64 sub = 4;
  int64 edit_distance = 5;

  int64 hyp_length = 6;
  int64 ref_length = 7;
};

message AccuracyResultsProto {
  int64 pos = 1;
  int64 count = 2;
};

message HypothesisResultsProto {
  string text = 1;
  float log_prob = 2;

  EditDistanceResultsProto cer = 3;
  EditDistanceResultsProto wer = 4;
};

message UtteranceResultsProto {
  string uttid = 1;
  string ref = 2;
  string hyp = 3;

  EditDistanceResultsProto cer = 4;
  EditDistanceResultsProto wer = 5;
};

message ProfileProto {
  float secs = 1;
  float steps = 2;
};

message ResultsProto {
  AccuracyResultsProto acc = 1;
  EditDistanceResultsProto edit_distance = 2;
};
